// This is our Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // if no environment variables have been set up, use the following as url
  // postgresql://eihocntsivnxjrzcrhmboxtu%40psql-mock-database-cloud:dzrxdjskhebhwamggdfofiia@psql-mock-database-cloud.postgres.database.azure.com:5432/booking1692881432019jkvgowtqqnczlapz
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  skill  Skill[]
  repositories Repository[]
}

model User {
  id        Int      @id @default(autoincrement())
  username String?   @unique
  auth0Id  String?   @unique
  email     String
  gitHub  String?
  firstName String?
  lastName  String?
  profile   Profile?
  projects  Project[]
  comments  Comment[]
}

model Skill {
  id               Int              @id @default(autoincrement())
  experience       String?
  level            String?
  programmingSkill String
  Profile          Profile?         @relation(fields: [profileId], references: [id])
  profileId Int
}

model Repository {
  id            Int         @id @default(autoincrement())
  name          String?
  description   String?
  updatedAt     String?
  createdAt     String?
  stars         Int?
  watchers      Int?
  language      String?
  Profile       Profile?         @relation(fields: [profileId], references: [id])
  profileId     Int
}

// *Miriam: new models for the project collaboration board with comment-function
model Project {
  id          String      @id @default(uuid())
  title       String
  description String
  stack       String[]
  timeline    String
  likes       Int         @default(0)
  comments    Comment[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
}

model Comment {
  id       String  @id @default(uuid())
  text     String
  project  Project @relation(fields: [projectId], references: [id])
  projectId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
